import os

import pytest
from click.testing import CliRunner

from tests.cli.modules.mod_fixtures import *  # noqa: F403, F401

repo_group = pytest.importorskip("hitchhiker.cli.modules.repo").repo_group
# from hitchhiker.cli.cli import cli


def test_repo_create(ten_mods):
    os.chdir(ten_mods)
    os.mkdir(ten_mods / "subdir")
    os.mkdir(ten_mods / "subdir" / "some_goofy_module")
    with open(
        ten_mods / "subdir" / "some_goofy_module" / "__manifest__.py",
        "w",
        encoding="utf-8",
    ) as f:
        f.write(
            """{
    "version": "1.23.123"
}"""
        )
    expected_output = """# Example:
#odoo_version: 17
#modules:
#  - name: test_abc
#    path: ./test_modules
#    git: 42nerds/module_test_inroot
#    git_tag: 17.0-v0.2.0
#    git_path: . # by default git path will be the same as the module name
#  - name: test_abcd
#    path: ./test_modules
#    use_latest: true # if true will always clone the latest version update it in the vogon.yaml. False by default
#    git: 42nerds/module_test
#    git_tag: 17.0-v0.0.1
#  - name: another_module
#    git: 42nerds/module_test
#    git_tag: 17.0-v0.1.0
#  - name: module_without_git
# Autogenerated from modules found in the current working directory:
odoo_version: 0 # set this!!!
modules:
  - name: a_another_cool_odoo_module
  - name: a_b_c
  - name: b_very_cool_odoo_module
  - name: boring_odoo_module
  - name: c_some_cool_odoo_module
  - name: d_extremely_cool_odoo_module
  - name: epic_odoo_module
  - name: interesting_odoo_module
  - name: some_goofy_module
    path: ./subdir
  - name: something
  - name: z_some_mod
"""
    result = CliRunner().invoke(repo_group, ["create"])
    assert result.exit_code == 0
    assert result.output == "Creating vogon.yaml\n"
    print(ten_mods)
    with open("vogon.yaml", "r", encoding="utf-8") as f:
        assert f.read() == expected_output
    result = CliRunner().invoke(repo_group, ["create"])
    assert result.exit_code == 0
    assert result.output == "vogon.yaml already exists and --overwrite is not set\n"
    result = CliRunner().invoke(repo_group, ["create", "--overwrite"])
    assert result.exit_code == 0
    assert result.output == "Creating vogon.yaml\n"
    print(ten_mods)
    with open("vogon.yaml", "r", encoding="utf-8") as f:
        assert f.read() == expected_output


def test_repo_update_noconf(tmp_path_factory):
    path = tmp_path_factory.mktemp("moddir")
    os.chdir(path)
    result = CliRunner().invoke(repo_group, ["update"])
    assert result.exit_code == 0
    assert result.output == "no vogon.yaml found\n"


def test_repo_update_nogit(tmp_path_factory):
    path = tmp_path_factory.mktemp("moddir")
    os.chdir(path)
    with open("vogon.yaml", "w", encoding="utf-8") as f:
        f.write(
            """modules:
  - name: some_test_module
    path: ./subfolder
    version: 0.0.5
  - name: test
  - name: x_some_mod
    version: 15.0.0
"""
        )
    result = CliRunner().invoke(repo_group, ["update"])
    assert result.exit_code == 0
    assert (
        result.output
        == """processing some_test_module
    skipping.. No repo set
processing test
    skipping.. No repo set
processing x_some_mod
    skipping.. No repo set
"""
    )
    result = CliRunner().invoke(repo_group, ["update", "--module", "test"])
    assert result.exit_code == 0
    assert (
        result.output
        == """processing test
    skipping.. No repo set
"""
    )
    result = CliRunner().invoke(repo_group, ["update", "--module", "doesnotexist"])
    assert result.exit_code == 0
    assert result.output == "module doesnotexist not found\n"


# TODO: this test is not nearly finished yet. But testing this command throughly is quite something (mock.. mock.. mock)
def test_repo_update_git(tmp_path_factory):
    path = tmp_path_factory.mktemp("moddir")
    os.chdir(path)
    with open("vogon.yaml", "w", encoding="utf-8") as f:
        f.write(
            """odoo_version: 15
modules:
  - name: some_test_module
    path: ./subfolder
    version: 0.0.5
  - name: test
  - name: x_some_mod
    git: someorg/module_x
    version: 15.0.0
  - name: x_another_mod
    git: someorg/module_inroot
    git_path: .
    version: 15.0.0
"""
        )
    # expected_output = """"""
    # result = CliRunner(env={"GITHUB_TOKEN": "somegithubtoken"}).invoke(
    #    cli, ["modules", "repo", "update"]
    # )
    # assert result.exit_code == 0
    # assert result.output == expected_output
